{"version":3,"sources":["components/ProjectInput.js","components/TextVariable.js","components/CrossResourceRoleModule.js","components/RDSInstanceModule.js","components/RDSClusterModule.js","components/ModuleControls.js","components/ModuleList.js","App.js","serviceWorker.js","index.js"],"names":["ProjectInput","props","className","TextField","labelId","label","onChange","event","setProjectRole","currentTarget","value","setProjectName","CrossResourceRoleModule","setModuleData","index","variable","target","map","field","TextVariable","RDSInstanceModule","useState","engine","setEngine","defaultValue","default","FormControl","InputLabel","id","Select","size","MenuItem","db","version","RDSClusterModule","console","log","ModuleControls","module","title","Button","onClick","removeModule","style","float","color","background","ModuleList","newModule","setNewModule","modules","setModules","removeModuleData","cloneModule","slice","push","key","width","variant","length","App","state","moduleData","projectRole","projectName","setState","document","getElementById","JSON","stringify","undefined","submitForm","a","fetch","method","headers","body","blob","then","window","navigator","msSaveBlob","URL","webkitURL","downloadUrl","createObjectURL","createElement","download","location","href","appendChild","click","setTimeout","revokeObjectURL","this","action","enctype","name","placeholder","height","type","React","Component","Boolean","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7949d1f8.chunk.js","sourcesContent":["import React from 'react';\nimport {TextField} from \"@material-ui/core\";\nimport '../App.css';\n\nfunction ProjectInput(props){\n  return (\n    <div className={'ProjectInput'}>\n      <TextField className={'ProjectInputTextField'} labelId={'ProjectRole'} label={'Project Role'} onChange={(event)=>{props.setProjectRole(event.currentTarget.value)}}/>\n      <TextField className={'ProjectInputTextField'} labelId={'ProjectName'} label={'Project Name'} onChange={(event)=>{props.setProjectName(event.currentTarget.value)}}/>\n    </div>\n  )\n}\n\nexport default ProjectInput;\n","import React, {useState} from 'react';\nimport { TextField } from '@material-ui/core';\n\nfunction CrossResourceRoleModule(props) {\n  return (\n    <TextField className=\"ModuleVariable\" label={props.label} onChange={(event) => {\n      props.setModuleData(props.index, props.variable, event.target.value)\n    }}/>\n  )\n}\n\nexport default CrossResourceRoleModule;\n","import React from 'react';\nimport TextVariable from './TextVariable';\n\nfunction CrossResourceRoleModule(props){\n  const fields = [\n    {label: 'Module Name', variable: 'moduleName'},\n    {label: 'Domain', variable: 'domain'},\n    {label: 'Subdomain', variable: 'subDomain'},\n    {label: 'User ID', variable: 'userId'},\n  ]\n  return (\n    <div className={'CrossResourceRoleModule'}>\n      {fields.map(field=>{\n        return (<TextVariable label={field.label} variable={field.variable} setModuleData={props.setModuleData} index={props.index}/>)\n      })}\n    </div>\n  )\n}\n\nexport default CrossResourceRoleModule;\n","import React, {useState} from 'react';\nimport TextVariable from './TextVariable';\nimport {FormControl, InputLabel, MenuItem, Select} from \"@material-ui/core\";\n\nfunction RDSInstanceModule(props){\n  const fields = [\n    {label: 'Module Name', variable: 'moduleName'},\n    {label: 'Domain', variable: 'domain'},\n    {label: 'Subdomain', variable: 'sub_domain'},\n    {label: 'Stage', variable: 'stage'},\n    {label: 'DB Port', variable: 'db_port'},\n    {label: 'DB Username', variable: 'db_username'},\n    {label: 'DB Password', variable: 'db_password'},\n    {label: 'DB Allocated Storage', variable: 'db_allocated_stroage'},\n    {label: 'DB Name', variable: 'db_name'},\n    {label: 'DB Ingress CIDR', variable: 'db_ingress_cidr'},\n  ]\n  const db_class = [\n//burstable class\n    \"db.t2.micro\", \"db.t2.small\", \"db.t2.medium\", \"db.t2.large\", \"db.t2.xlarge\", \"db.t3.micro\", \"db.t3.small\", \"db.t3.medium\", \"db.t3.large\",  \"db.t3.xlarge\", \"db.t3.2xlarge\",\n//standard classes\n    \"db.m3.large\", \"db.m3.xlarge\",  \"db.m3.2xlarge\",  \"db.m3.4xlarge\", \"db.m3.8xlarge\",  \"db.r4.large\",  \"db.r4.xlarge\",  \"db.r4.2xlarge\",  \"db.r4.4xlarge\", \"db.r4.8xlarge\", \"db.r4.16xlarge\",  \"db.r5.large\", \"db.r5.xlarge\", \"db.r5.2xlarge\", \"db.r5.4xlarge\", \"db.r5.12xlarge\", \"db.r5.24xlarge\",\n//memory optimized\n    \"db.r3.large\", \"db.r3.xlarge\", \"db.r3.2xlarge\", \"db.r3.4xlarge\", \"db.r3.8xlarge\", \"db.r4.large\", \"db.r4.xlarge\", \"db.r4.2xlarge\", \"db.r4.4xlarge\", \"db.r4.8xlarge\", \"db.r4.16xlarge\", \"db.r5.large\",  \"db.r5.xlarge\",  \"db.r5.2xlarge\",  \"db.r5.4xlarge\",  \"db.r5.12xlarge\", \"db.r5.24xlarge\"];\n\n  const mysql_versions = [\"5.5.46\", \"5.5.53\", \"5.5.54\", \"5.5.57\",  \"5.5.59\", \"5.5.61\", \"5.6.34\", \"5.6.35\", \"5.6.37\", \"5.6.39\", \"5.6.44\", \"5.7.16\", \"5.7.17\", \"5.7.21\", \"5.7.22\", \"5.7.23\",  \"5.7.24\", \"5.7.25\", \"5.7.26\", \"8.0.11\", \"8.0.13\", \"8.0.15\",  \"8.0.16\"];\n  const postgres_versions = [\"9.3.12\", \"9.3.14\", \"9.3.16\", \"9.3.17\", \"9.3.19\", \"9.3.20\",  \"9.3.22\", \"9.3.23\",  \"9.3.24\", \"9.3.25\", \"9.4.7\", \"9.4.9\", \"9.4.11\", \"9.4.12\", \"9.4.14\", \"9.4.15\", \"9.4.17\", \"9.4.18\", \"9.4.19\", \"9.4.20\", \"9.4.21\", \"9.4.23\", \"9.4.24\" ];\n  const db_engines = [\"mysql\",\"postgres\"];\n  const [engine, setEngine] = useState(null);\n  return (\n    <div className={'RDSInstanceModule'}>\n      {fields.map(field=>{\n        return (<TextVariable label={field.label} variable={field.variable} setModuleData={props.setModuleData} index={props.index} defaultValue={field.default?field.default:''}/>)\n      })}\n      <FormControl className=\"ModuleVariable\">\n        <InputLabel id={'DBClass'}>DB Class</InputLabel>\n        <Select labelId={'DBClass'} onChange={(event)=>{props.setModuleData(props.index, 'db_class', event.target.value)}}>\n          {db_class.map(size=>\n            <MenuItem value={size}>{size}</MenuItem>\n          )}\n        </Select>\n      </FormControl>\n      <FormControl className=\"ModuleVariable\">\n        <InputLabel id={'DBEngine'}>DB Engine</InputLabel>\n        <Select labelId={'DBEngine'} onChange={(event)=>{setEngine(event.target.value);props.setModuleData(props.index, 'db_engine', event.target.value)}}>\n          {db_engines.map(db=>\n            <MenuItem value={db}>{db}</MenuItem>\n          )}\n        </Select>\n      </FormControl>\n      <FormControl className=\"ModuleVariable\">\n        <InputLabel id={'DBEngineVersion'}>DB Engine Version</InputLabel>\n        <Select labelId={'DBEngineVersion'} onChange={(event)=>{props.setModuleData(props.index, 'db_engine_version', event.target.value)}}>\n          {engine==='mysql'&&mysql_versions.map(version=>\n            <MenuItem value={version}>{version}</MenuItem>\n          )}\n          {engine==='postgres'&&postgres_versions.map(version=>\n            <MenuItem value={version}>{version}</MenuItem>\n          )}\n        </Select>\n      </FormControl>\n    </div>\n  )\n}\n\nexport default RDSInstanceModule;\n","import React, { useState } from 'react';\nimport TextVariable from './TextVariable';\nimport {Select, MenuItem, InputLabel, FormControl} from '@material-ui/core';\n\nfunction RDSClusterModule(props){\n  const fields = [\n    {label: 'Module Name', variable: 'moduleName'},\n    {label: 'Domain', variable: 'domain'},\n    {label: 'Subdomain', variable: 'sub_domain'},\n    {label: 'Stage', variable: 'stage'},\n    {label: 'DB # of Instances', variable: 'db_number_instances'},\n    {label: 'DB Port', variable: 'db_port'},\n    {label: 'DB Username', variable: 'db_username'},\n    {label: 'DB Password', variable: 'db_password'},\n    {label: 'DB Allocated Storage', variable: 'db_allocated_stroage'},\n    {label: 'DB Name', variable: 'db_name'},\n    {label: 'DB Ingress CIDR', variable: 'db_ingress_cidr'},\n  ]\n\n  const cluster_sizes = [\"db.t3.medium\", \"db.r4.large\", \"db.r4.xlarge\", \"db.r4.2xlarge\", \"db.r4.4xlarge\", \"db.r4.8xlarge\", \"db.r4.16xlarge\", \"db.r5.large\", \"db.r5.xlarge\", \"db.r5.2xlarge\", \"db.r5.4xlarge\", \"db.r5.12xlarge\", \"db.r5.24xlarge\"];\n  const db_engines = [\"aurora\", \"aurora-mysql\", \"aurora-postgresql\"];\n  const versions_aurora_postgres = [ \"9.6.8\", \"9.6.9\", \"9.6.11\", \"9.6.12\", \"10.4\", \"10.5\", \"10.6\", \"10.7\" ];\n  const versions_aurora_mysql = [ \"1.19.0\", \"1.19.1\", \"1.19.2\", \"1.19.5\", \"1.20.0\", \"1.21.0\", \"2.03.4\", \"2.04.0\", \"2.04.1\", \"2.04.2\", \"2.04.3\", \"2.04.4\", \"2.04.5\" , \"2.04.6\", \"2.04.7\", \"2.05.0\", \"2.06.0\"];\n  const [engine, setEngine] = useState(null);\n  console.log(engine);\n  return (\n    <div className={'RDSCluserModule'}>\n      {fields.map(field=>{\n        return (<TextVariable label={field.label} variable={field.variable} setModuleData={props.setModuleData} index={props.index} defaultValue={field.default?field.default:''}/>)\n      })}\n      <FormControl className=\"ModuleVariable\">\n        <InputLabel id={'DBClass'}>DB Class</InputLabel>\n        <Select labelId={'DBClass'} onChange={(event)=>{props.setModuleData(props.index, 'db_class', event.target.value)}}>\n            {cluster_sizes.map(size=>\n          <MenuItem value={size}>{size}</MenuItem>\n        )}\n        </Select>\n      </FormControl>\n      <FormControl className=\"ModuleVariable\">\n        <InputLabel id={'DBCEngine'}>DB Engine</InputLabel>\n        <Select labelId={'DBCEngine'} onChange={(event)=>{setEngine(event.target.value);props.setModuleData(props.index, 'db_engine', event.target.value)}}>\n          {db_engines.map(db=>\n            <MenuItem value={db}>{db}</MenuItem>\n          )}\n        </Select>\n      </FormControl>\n      <FormControl className=\"ModuleVariable\">\n        <InputLabel id={'DBVersion'}>DB Version</InputLabel>\n        <Select labelId={'DBVersion'} onChange={(event)=>{props.setModuleData(props.index, 'db_engine_version', event.target.value)}}>\n          {engine==='aurora-mysql' && versions_aurora_mysql.map(version=>\n            <MenuItem value={version}>{version}</MenuItem>\n          )}\n          {engine==='aurora-postgresql' && versions_aurora_postgres.map(version=>\n            <MenuItem value={version}>{version}</MenuItem>\n          )}\n        </Select>\n      </FormControl>\n\n    </div>\n  )\n}\n\nexport default RDSClusterModule;\n","import React from 'react';\nimport { Button } from '@material-ui/core'\nfunction ModuleControls(props){\n  if(!props.module){return ''}\n  return (\n    <div className={'ModuleControls'}>\n      <div className={'ModuleTitle'}>\n        {props.module.props.title}\n        <Button onClick={()=>{props.removeModule(props.index)}} style={{float:'right',color:\"#000000\",background:'#CC8888'}}>Remove</Button>\n        <div style={{'clear':'both'}}></div>\n      </div>\n\n      <div className={'ModuleWrapper'}>\n        {props.module}\n      </div>\n    </div>\n  )\n}\n\nexport default ModuleControls;\n","import React, { useState } from 'react';\nimport CrossResourceRoleModule from './CrossResourceRoleModule';\nimport RDSInstanceModule from './RDSInstanceModule';\nimport RDSClusterModule from './RDSClusterModule';\n\nimport { Button, Select, MenuItem, InputLabel, FormControl } from '@material-ui/core';\nimport ModuleControls from './ModuleControls';\n\nfunction ModuleList(props){\n  const [newModule, setNewModule] = useState(null);\n  const addModule = () => {\n    const modules = props.modules || [];\n    console.log(newModule);\n    if(newModule==='CRRM'){\n      props.setModuleData(modules.length,'moduleType','CRRM');\n      modules.push(<CrossResourceRoleModule index={modules.length} setModuleData={props.setModuleData} title={'Cross Resource Role Module'}/>);\n      props.setModules(modules);\n    }\n    if(newModule==='RDSI'){\n      props.setModuleData(modules.length,'moduleType','RDSI');\n      modules.push(<RDSInstanceModule index={modules.length} setModuleData={props.setModuleData} title={'RDS Instance Module'}/>);\n      props.setModules(modules);\n    }\n    if(newModule==='RDSC'){\n      props.setModuleData(modules.length,'moduleType','RDSC');\n      modules.push(<RDSClusterModule index={modules.length} setModuleData={props.setModuleData} title={'RDS Cluster Module'}/>);\n      props.setModules(modules);\n    }\n    console.log(modules);\n  }\n  const chooseModule = (event) => {\n    setNewModule(event.target.value);\n  }\n  const removeModule = (index) => {\n    const modules = props.modules || [];\n    modules[index]=null;\n    props.setModules(modules);\n    props.removeModuleData(index);\n  }\n\n  const cloneModule = (index) => {\n    const modules = props.modules || [];\n    const newModule = modules.slice(index,index+1)[0];\n    modules.push(newModule);\n    props.setModules(modules);\n  }\n  return (\n    <div className={'ModuleList'}>\n      <div className={'ModuleListContainer'}>\n        {props.modules && props.modules.map((module,index)=>{\n          return <ModuleControls\n                    key={`module${index}`}\n                    index={index}\n                    module={module}\n                    removeModule={removeModule}\n                    cloneModule={cloneModule}\n                    setModuleData={props.setModuleData}\n          />;\n        })}\n      </div>\n      <FormControl style={{width:'30em'}}>\n        <InputLabel id={'ModuleSelectLabel'}>Choose Module</InputLabel>\n        <Select labelId={'ModuleSelectLabel'} onChange={chooseModule}>\n          <MenuItem value={'CRRM'}>Cross Resource Role Module</MenuItem>\n          <MenuItem value={'RDSI'}>RDS Instance</MenuItem>\n          <MenuItem value={'RDSC'}>RDS Cluster</MenuItem>\n        </Select>\n      </FormControl>\n      <Button variant={'contained'} onClick={addModule} style={{background:'#88CC88'}}>Add Module</Button>\n\n    </div>\n  )\n}\n\nexport default ModuleList;\n\n","import React from 'react';\nimport './App.css';\nimport ProjectInput from './components/ProjectInput';\nimport ModuleList from './components/ModuleList';\n\nclass App extends React.Component {\n  state = {\n    modules: [],\n    moduleData: [],\n    projectRole: '',\n    projectName: '',\n  };\n  setProjectRole = (projectRole) => {this.setState({projectRole})};\n  setProjectName = (projectName) => {this.setState({projectName})};\n  setModules = (modules) => {\n    this.setState({modules});\n  };\n  setModuleData = (index, variable, value) => {\n    console.log(`${index} ${variable}=${value}`);\n    const moduleData = this.state.moduleData;\n    if(!moduleData[index]){\n      moduleData[index]={};\n    }\n    moduleData[index][variable]=value;\n    this.setState({moduleData});\n    document.getElementById('outdata').value=JSON.stringify({projectRole:this.state.projectRole, projectName:this.state.projectName, moduleData: this.state.moduleData}, undefined, 2);\n  };\n  removeModuleData = (index) => {\n    const moduleData = this.state.moduleData;\n    moduleData[index] = null;\n    this.setState({moduleData});\n    document.getElementById('outdata').value=JSON.stringify({projectRole:this.state.projectRole, projectName:this.state.projectName, moduleData: this.state.moduleData}, undefined, 2);\n\n  }\n  submitForm = async () => {\n    const response = await fetch('//localhost:8080/generate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=UTF8'\n      },\n      body: JSON.stringify({projectRole:this.state.projectRole, projectName:this.state.projectName, moduleData: this.state.moduleData}) // body data type must match \"Content-Type\" header\n    });\n    response.blob().then(function(blob) {\n      const filename='terraform.zip';\n      if (typeof window.navigator.msSaveBlob !== 'undefined') {\n        // IE workaround for \"HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed.\"\n        window.navigator.msSaveBlob(blob, filename);\n      } else {\n        let URL = window.URL || window.webkitURL;\n        let downloadUrl = URL.createObjectURL(blob);\n\n        if (filename) {\n          // use HTML5 a[download] attribute to specify filename\n          let a = document.createElement(\"a\");\n          // safari doesn't support this yet\n          if (typeof a.download === 'undefined') {\n            window.location = downloadUrl;\n          } else {\n            a.href = downloadUrl;\n            a.download = filename;\n            document.body.appendChild(a);\n            a.click();\n          }\n        } else {\n          window.location = downloadUrl;\n        }\n\n        setTimeout(function () { URL.revokeObjectURL(downloadUrl); }, 100); // cleanup\n      }\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"AppContainer\">\n          <h1>Slartibartfast / Terraform Nursery / Terraform Initializer</h1>\n          <ProjectInput setProjectRole={this.setProjectRole} setProjectName={this.setProjectName}/>\n          <ModuleList setModules={this.setModules} modules={this.state.modules} removeModuleData={this.removeModuleData} setModuleData={this.setModuleData}/>\n          <form method={'post'} action={'http://localhost:8080/generate'} enctype=\"\">\n            <textarea name='JSONOUT' placeholder='JSON OUTPUT GOES HERE' style={{width:'64em', height:'10em'}} id={'outdata'}></textarea>\n            <input type={'button'} value={'Submit'} onClick={this.submitForm}/>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}