{"version":3,"sources":["components/ProjectInput.js","components/TextVariable.js","components/CrossResourceRoleModule.js","components/RDSInstanceModule.js","components/RDSClusterModule.js","components/ModuleControls.js","components/ModuleList.js","App.js","serviceWorker.js","index.js"],"names":["ProjectInput","props","className","TextField","labelId","label","onChange","event","setProjectRole","currentTarget","value","setProjectName","CrossResourceRoleModule","setModuleData","index","variable","target","map","field","TextVariable","RDSInstanceModule","defaultValue","default","RDSClusterModule","ModuleControls","module","title","Button","onClick","removeModule","style","float","ModuleList","useState","newModule","setNewModule","modules","setModules","removeModuleData","cloneModule","slice","push","key","FormControl","width","InputLabel","id","Select","MenuItem","variant","console","log","length","App","state","moduleData","projectRole","projectName","setState","document","getElementById","JSON","stringify","this","method","action","name","placeholder","height","type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3a8ace2.chunk.js","sourcesContent":["import React from 'react';\nimport {TextField} from \"@material-ui/core\";\nimport '../App.css';\n\nfunction ProjectInput(props){\n  return (\n    <div className={'ProjectInput'}>\n      <TextField className={'ProjectInputTextField'} labelId={'ProjectRole'} label={'Project Role'} onChange={(event)=>{props.setProjectRole(event.currentTarget.value)}}/>\n      <TextField className={'ProjectInputTextField'} labelId={'ProjectName'} label={'Project Name'} onChange={(event)=>{props.setProjectName(event.currentTarget.value)}}/>\n    </div>\n  )\n}\n\nexport default ProjectInput;\n","import React, {useState} from 'react';\nimport { TextField } from '@material-ui/core';\n\nfunction CrossResourceRoleModule(props) {\n  return (\n    <TextField className=\"ModuleVariable\" label={props.label} onChange={(event) => {\n      props.setModuleData(props.index, props.variable, event.target.value)\n    }}/>\n  )\n}\n\nexport default CrossResourceRoleModule;\n","import React from 'react';\nimport TextVariable from './TextVariable';\n\nfunction CrossResourceRoleModule(props){\n  const fields = [\n    {label: 'Module Name', variable: 'moduleName'},\n    {label: 'Domain', variable: 'domain'},\n    {label: 'Subdomain', variable: 'subDomain'},\n    {label: 'User ID', variable: 'userId'},\n  ]\n  return (\n    <div className={'CrossResourceRoleModule'}>\n      {fields.map(field=>{\n        return (<TextVariable label={field.label} variable={field.variable} setModuleData={props.setModuleData} index={props.index}/>)\n      })}\n    </div>\n  )\n}\n\nexport default CrossResourceRoleModule;\n","import React from 'react';\nimport TextVariable from './TextVariable';\n\nfunction RDSInstanceModule(props){\n  const fields = [\n    {label: 'Module Name', variable: 'moduleName'},\n    {label: 'Domain', variable: 'domain'},\n    {label: 'Subdomain', variable: 'sub_domain'},\n    {label: 'Stage', variable: 'stage'},\n    {label: 'DB Port', variable: 'db_port'},\n    {label: 'DB Username', variable: 'db_username'},\n    {label: 'DB Password', variable: 'db_password'},\n    {label: 'DB Allocated Storage', variable: 'db_allocated_stroage'},\n    {label: 'DB Name', variable: 'db_name'},\n    {label: 'DB Engine', variable: 'db_engine'},\n    {label: 'DB Engine Version', variable: 'db_engine_version'},\n    {label: 'DB Class', variable: 'db_class'},\n    {label: 'DB Ingress CIDR', variable: 'db_ingress_cidr'},\n  ]\n  return (\n    <div className={'RDSInstanceModule'}>\n      {fields.map(field=>{\n        return (<TextVariable label={field.label} variable={field.variable} setModuleData={props.setModuleData} index={props.index} defaultValue={field.default?field.default:''}/>)\n      })}\n    </div>\n  )\n}\n\nexport default RDSInstanceModule;\n","import React from 'react';\nimport TextVariable from './TextVariable';\n\nfunction RDSClusterModule(props){\n  const fields = [\n    {label: 'Module Name', variable: 'moduleName'},\n    {label: 'Domain', variable: 'domain'},\n    {label: 'Subdomain', variable: 'sub_domain'},\n    {label: 'Stage', variable: 'stage'},\n    {label: 'DB Port', variable: 'db_port'},\n    {label: 'DB Username', variable: 'db_username'},\n    {label: 'DB Password', variable: 'db_password'},\n    {label: 'DB Allocated Storage', variable: 'db_allocated_stroage'},\n    {label: 'DB Name', variable: 'db_name'},\n    {label: 'DB Engine', variable: 'db_engine'},\n    {label: 'DB Engine Version', variable: 'db_engine_version'},\n    {label: 'DB Class', variable: 'db_class'},\n    {label: 'DB Ingress CIDR', variable: 'db_ingress_cidr'},\n  ]\n  return (\n    <div className={'RDSCluserModule'}>\n      {fields.map(field=>{\n        return (<TextVariable label={field.label} variable={field.variable} setModuleData={props.setModuleData} index={props.index} defaultValue={field.default?field.default:''}/>)\n      })}\n    </div>\n  )\n}\n\nexport default RDSClusterModule;\n","import React from 'react';\nimport { Button } from '@material-ui/core'\nfunction ModuleControls(props){\n  if(!props.module){return ''}\n  return (\n    <div className={'ModuleControls'}>\n      <div className={'ModuleTitle'}>\n        {props.module.props.title}\n        <Button onClick={()=>{props.removeModule(props.index)}} style={{float:'right'}}>Remove</Button>\n        <div style={{'clear':'both'}}></div>\n      </div>\n\n      <div className={'ModuleWrapper'}>\n        {props.module}\n      </div>\n    </div>\n  )\n}\n\nexport default ModuleControls;\n","import React, { useState } from 'react';\nimport CrossResourceRoleModule from './CrossResourceRoleModule';\nimport RDSInstanceModule from './RDSInstanceModule';\nimport RDSClusterModule from './RDSClusterModule';\n\nimport { Button, Select, MenuItem, InputLabel, FormControl } from '@material-ui/core';\nimport ModuleControls from './ModuleControls';\n\nfunction ModuleList(props){\n  const [newModule, setNewModule] = useState(null);\n  const addModule = () => {\n    const modules = props.modules || [];\n    console.log(newModule);\n    if(newModule==='CRRM'){\n      props.setModuleData(modules.length,'moduleType','CRRM');\n      modules.push(<CrossResourceRoleModule index={modules.length} setModuleData={props.setModuleData} title={'Cross Resource Role Module'}/>);\n      props.setModules(modules);\n    }\n    if(newModule==='RDSI'){\n      props.setModuleData(modules.length,'moduleType','RDSI');\n      modules.push(<RDSInstanceModule index={modules.length} setModuleData={props.setModuleData} title={'RDS Instance Module'}/>);\n      props.setModules(modules);\n    }\n    if(newModule==='RDSC'){\n      props.setModuleData(modules.length,'moduleType','RDSC');\n      modules.push(<RDSClusterModule index={modules.length} setModuleData={props.setModuleData} title={'RDS Cluster Module'}/>);\n      props.setModules(modules);\n    }\n    console.log(modules);\n  }\n  const chooseModule = (event) => {\n    setNewModule(event.target.value);\n  }\n  const removeModule = (index) => {\n    const modules = props.modules || [];\n    modules[index]=null;\n    props.setModules(modules);\n    props.removeModuleData(index);\n  }\n\n  const cloneModule = (index) => {\n    const modules = props.modules || [];\n    const newModule = modules.slice(index,index+1)[0];\n    modules.push(newModule);\n    props.setModules(modules);\n  }\n  return (\n    <div className={'ModuleList'}>\n      <div className={'ModuleListContainer'}>\n        {props.modules && props.modules.map((module,index)=>{\n          return <ModuleControls\n                    key={`module${index}`}\n                    index={index}\n                    module={module}\n                    removeModule={removeModule}\n                    cloneModule={cloneModule}\n                    setModuleData={props.setModuleData}\n          />;\n        })}\n      </div>\n      <FormControl style={{width:'30em'}}>\n        <InputLabel id={'ModuleSelectLabel'}>Choose Module</InputLabel>\n        <Select labelId={'ModuleSelectLabel'} onChange={chooseModule}>\n          <MenuItem value={'CRRM'}>Cross Resource Role Module</MenuItem>\n          <MenuItem value={'RDSI'}>RDS Instance</MenuItem>\n          <MenuItem value={'RDSC'}>RDS Cluster</MenuItem>\n        </Select>\n      </FormControl>\n      <Button variant={'contained'} onClick={addModule}>Add Module</Button>\n\n    </div>\n  )\n}\n\nexport default ModuleList;\n\n","import React from 'react';\nimport './App.css';\nimport ProjectInput from './components/ProjectInput';\nimport ModuleList from './components/ModuleList';\n\nclass App extends React.Component {\n  state = {\n    modules: [],\n    moduleData: [],\n    projectRole: '',\n    projectName: '',\n  };\n  setProjectRole = (projectRole) => {this.setState({projectRole})};\n  setProjectName = (projectName) => {this.setState({projectName})};\n  setModules = (modules) => {\n    this.setState({modules});\n  };\n  setModuleData = (index, variable, value) => {\n    console.log(`${index} ${variable}=${value}`);\n    const moduleData = this.state.moduleData;\n    if(!moduleData[index]){\n      moduleData[index]={};\n    }\n    moduleData[index][variable]=value;\n    this.setState({moduleData});\n    document.getElementById('outdata').value=JSON.stringify({projectRole:this.state.projectRole, projectName:this.state.projectName, moduleData: this.state.moduleData});\n  };\n  removeModuleData = (index) => {\n    const moduleData = this.state.moduleData;\n    moduleData[index] = null;\n    this.setState({moduleData});\n    document.getElementById('outdata').value=JSON.stringify({projectRole:this.state.projectRole, projectName:this.state.projectName, moduleData: this.state.moduleData});\n\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"AppContainer\">\n          <h1>Slartibartfast / Terraform Nursery / Terraform Initializer</h1>\n          <ProjectInput setProjectRole={this.setProjectRole} setProjectName={this.setProjectName}/>\n          <ModuleList setModules={this.setModules} modules={this.state.modules} moduleData={this.state.moduleData} removeModuleData={this.removeModuleData} setModuleData={this.setModuleData}/>\n          <form method={'post'} action={'/generate'}>\n            <textarea name='JSONOUT' placeholder='JSON OUTPUT GOES HERE' style={{width:'64em', height:'10em'}} id={'outdata'}></textarea>\n            <input type={'submit'} value={'Submit'}/>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}